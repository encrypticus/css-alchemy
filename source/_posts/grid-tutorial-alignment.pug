---
title: 'Исчерпывающее руководство по созданию модульной библиотеки, реализующей адаптивную сетку. Часть 2. Выравнивание колонок.'
date: 2020-06-21 21:26:55
tags:
- scss
- sass
- libs
categories:
- препроцессоры
- scss
- библиотеки
thumbnail: /img/flexbox-grid-hero.png
description: 'Пошаговое руководство как создать сетку для сайта. Туториал сетки для сайта. Выравнивание элементов в flexbox сетке.'
keywords: 'flexbox сетка, css сетка, сетка для сайта, как создать сетку для сайта, flexbox grid, your own css grid, выравнивание элементов flexbox, flexbox alignment, flex justify-content, flex align-items, flex align-self'
include_post_style: post
alt: 'Выравнивание колонок'
include_highlight: true
---
include ../../themes/alchemy/layout/components/heading/heading
include _snippets/snippets
-
  const html = snippets.grid.html;
  const sass = snippets.grid.sass;
  const bash= snippets.grid.bash;

p.post__text
  | В <a class='post__link' href='/2020/06/20/grid-tutorial/'>первой</a> части руководства мы реализовали
  | основной функционал нашей библиотеки. В этой статье и во всех последующих мы добавим функционал, без которого
  | библиотека не была бы полноценной. В этой части мы добавим модуль, отвечающий за выравнивание колонок внутри ряда сетки.
  | Выравнивание колонок внутри ряда – это по сути то же самое, что и выравнивание флекс-элементов внутри флекс-контейнера.
  | Ведь фактически колонки сетки и есть флекс-элементы внутри ряда сетки – флекс-контейнера. А как нам известно, для
  | флекс-элементов существует два вида выравнивания – выравнивание вдоль главной оси и выравнивание вдоль поперечной оси.
  | Лучше продемонстрировать это наглядно.

p.post__text Выравнивание колонок вдоль главной оси:

p.post__text Колонки располагаются в начале ряда:
.post__grid
  .row.justify-content-start
    .col-2.no-v-gutters.post__col 1
    .col-2.no-v-gutters.post__col 2

p.post__text Колонки располагаются по центру ряда:
.post__grid
  .row.justify-content-center
    .col-2.no-v-gutters.post__col 1
    .col-2.no-v-gutters.post__col 2

p.post__text Колонки располагаются в конце ряда:
.post__grid
  .row.justify-content-end
    .col-2.no-v-gutters.post__col 1
    .col-2.no-v-gutters.post__col 2

p.post__text
  | Колонки располагаются равномерно по ширине ряда. Аналог <span class='code'>justify-content: space-between</span>:
.post__grid
  .row.justify-content-space-between
    .col-2.no-v-gutters.post__col 1
    .col-2.no-v-gutters.post__col 2

p.post__text
  | Колонки располагаются равномерно по ширине ряда и имеют полуразмерное пространство.
  | Аналог<span class='code'>justify-content: space-around</span>:
.post__grid
  .row.justify-content-space-around
    .col-2.no-v-gutters.post__col 1
    .col-2.no-v-gutters.post__col 2

p.post__text Выравнивание колонок вдоль поперечной оси:

p.post__text Колонки располагаются в начале ряда:

.post__grid
  .row.align-items-start(style='height: 200px')
    .col.no-v-gutters.post__col 1
    .col.no-v-gutters.post__col 2

p.post__text Колонки располагаются по центру ряда:
.post__grid
  .row.align-items-center(style='height: 200px')
    .col.no-v-gutters.post__col 1
    .col.no-v-gutters.post__col 2

p.post__text Колонки располагаются в конце ряда:
.post__grid
  .row.align-items-end(style='height: 200px')
    .col.no-v-gutters.post__col 1
    .col.no-v-gutters.post__col 2

p.post__text
  | Колонки имеют "авто-размер", подстраиваясь под размер контейнера. Аналог <span class='code'>align-items: stretch</span>:
.post__grid
  .row.align-items-stretch(style='height: 200px')
    .col.no-v-gutters.post__col 1
    .col.no-v-gutters.post__col 2

p.post__text Выравнивание отдельно взятой колонки вдоль поперечной оси:
p.post__text В начале ряда:
.post__grid
  .row(style='height: 200px')
    .col.no-v-gutters.align-self-start.post__col 1
    .col.no-v-gutters.post__col 2

p.post__text В центре ряда:
.post__grid
  .row(style='height: 200px')
    .col.no-v-gutters.align-self-center.post__col 1
    .col.no-v-gutters.post__col 2

p.post__text В конце ряда:
.post__grid
  .row(style='height: 200px')
    .col.no-v-gutters.align-self-end.post__col 1
    .col.no-v-gutters.post__col 2

p.post__text Теперь давайте посмотрим, как реализовать такой функционал.

p.post__text
  | Для начала в директорию с миксинами <span class='code'>mixins</span> добавим новый файл <span class='code'>_alignment</span>,
  | в котором и будет храниться код, отвечающий за выравнивание элементов. Первым делом добавим миксин, отвечающий за
  | вырвнивание колонок вдоль главной оси:
+snippet(sass[37], 'scss')

p.post__text
  | Миксин принимает на вход два параметра – <span class='code'>$align</span> и <span class='code'>$breakpoint</span>.
  | Параметр <span class='code'>$align</span> задаёт способ выравнивания колонок и может принимать одно из следующих значений:
  | <span class='code'>flex-start</span>, <span class='code'>center</span>, <span class='code'>flex-end</span>,
  | <span class='code'>space-between</span>, <span class='code'>space-around</span>. По умолчанию колонки располагаются
  | в начале ряда.

p.post__text
  | Параметр <span class='code'>$breakpoint</span> определяет, будет ли выравнивание колонок применяться внутри медиазапроса.
  | Если при вызове миксина ему будет передан второй аргумент, и его значение будет соответствовать одному из имён ключей
  | глобального массива <span class='code'>$grid-breakpoints</span>, то заданное выравнивание сработает в медиазапросе.
  | То есть, если мы вызовем миксин так:
+snippet(sass[38], 'scss')

p.post__text тогда элемент будет расположен в конце ряда.

p.post__text Если же мы вызовем миксин так:
+snippet(sass[39], 'scss')

p.post__text тогда элемент будет расположен в конце ряда, когда размер вьюпорта будет равен 1024px и меньше.

p.post__text Аналогично добавим миксин, отвечающий за выравнивание колонок вдоль поперечной оси:
+snippet(sass[40], 'scss')

p.post__text
  | Этот миксин очень похож на предыдущий, за исключением того, что параметр <span class='code'>$align</span> задаёт
  | выравнивание колонок вдоль поперечной оси и должен принимать сдедующие значения: <span class='code'>flex-start</span>,
  | <span class='code'>flex-end</span>, <span class='code'>center</span>, <span class='code'>stretch</span>,
  | <span class='code'>baseline</span>.

p.post__text И наконец добавим последний миксин, отвечающий за выравнивание отдельно взятой колонки вдоль поперечной оси:
+snippet(sass[41], 'scss')

p.post__text
  | Опять же, отличие данного миксина от двух предыдущих в том, что параметр <span class='code'>$align</span> задаёт
  | выравнивание отдельно взятой колонки внутри ряда, но должен принимать те же значения, что и в предыдущем миксине:
  | <span class='code'>flex-start</span>, <span class='code'>flex-end</span>, <span class='code'>center</span>,
  | <span class='code'>stretch</span>, <span class='code'>baseline</span>.

p.post__text Полный на данный момент код файла <span class='code'>mixins/_alignment.scss</span>:
+snippet(sass[42], 'scss')

p.post__text
  | Как мы помним, нам также нужно сгенерировать готовые предопределённые классы, которые позволят нам строить сетку
  | исключительно в html-разметке. В директорию <span class='code'>partials</span> добавим файл
  | <span class='code'>alignment.scss</span> и напишём в нём такой код:
+snippet(sass[43], 'scss')

p.post__text
  | В этих классах нет ничего особенного, они всего лишь подключают написанные выше миксины, тем самым добавляя правила
  | выравнивания.

p.post__text
  | Как мы помним, вторым параметром наши миксины принимают имя брейкпоинта, при котором срабатывает выравнивание. Это значит,
  | что наш код также должен генерировать классы выравнивания в медиазапросах. Чтобы было понятнее, я добавлю миксин, который
  | при вызове генерирует "выравнивающие" классы в медиазапросах. Итак, в файл <span class='code'>mixins/_alignment.scss</span> я
  | добавляю следующий миксин:
+snippet(sass[44], 'scss')

p.post__text
  | Как видите, у нас появилась новая переменная <span class='code'>$h-alignment-classes</span>. Поэтому также добавим её в
  | начало файла <span class='code'>mixins/_alignment</span>:
+snippet(sass[45], 'scss')

p.post__text
  | <span class='code'>$h-alignment-classes</span> – это массив, содержащий пары "ключ-значение", который нужен нам внутри
  | миксина <span class='code'>generate-h-alignment-breakpoints</span>. Стоит более подробно рассмотреть этот миксин. Внутри
  | миксина выполняется двойной цикл. Внешний цикл совершает проход по списку брейкпоинтов, хранящихся в глобальной переменной
  | <span class='code'>$grid-breakpoints</span>. На каждой итерации этого цикла выполняется внутринний цикл, совершающий
  | проход по списку <span class='code'>$h-alignment-classes</span>. В свою очередь на каждой итерации внутреннего цикла
  | происходит формирование "выравнивающего" класса, внутри которого происходит подключение миксина, отвечающего за добавление
  | правил, необходимых для выравнивания элемента вдоль основной оси. Причём все правила выравнивания формируются внутри
  | директивы <span class='code'>@media</span>.

p.post__text
  | То есть в итоге вызов миксина сгенерирует селекторы классов вида: <span class='code'>.justify-content-desktop-start</span>,
  | <span class='code'>.justify-content-laptop-center</span>, <span class='code'>.justify-content-phone-end</span> и т. д.

p.post__text
  | Аналогично я добавлю ещё два миксина, отвечающих за генерирование классов, "выравнивающих" колонки вдоль поперечной
  | оси, и классов, "выравнивающих" отдельно взятую колонку вдоль поперечной оси внутри ряда сетки:
+snippet(sass[46], 'scss')

p.post__text И снова в начало файла добавлю дополнительную переменную:
+snippet(sass[47], 'scss')

p.post__text
  | Эти два дополнительных миксина не нуждаются в подробном разборе, так как они по своему принципу действия аналогичны
  | предыдущему миксину. Единственно, что стоит упомянуть, это то, что миксины генерируют классы, отвечающие за выравнивание
  | элементов вдоль поперечной оси.

p.post__text
  | Теперь нам нужно вызвать эти миксины, чтобы сгенерировать все необходимые классы. Добавим вызов миксинов в файл
  | <span class='code'>partials/alignment</span>:
+snippet(sass[48], 'scss')

p.post__text А теперь приведу полоный код с подробными комментариями.

p.post__text mixins/_alignment.scss:
+snippet(sass[49], 'scss')

p.post__text partials/alignment.scss:
+snippet(sass[50], 'scss')

p.post__text
  | Теперь для выравнивания колонок мы можем воспользоваться как нашими миксинами, так и готовыми сгенерированными классами:
.row
  +snippet(html[8])(class='col col-laptop-12')
  +snippet(sass[51], 'scss')(class='col')

.container
  .row.justify-content-start.no-children-v-gutters(style='background-color: #d4d4d4; margin-bottom: 10px')
    .col-2.post__col col-2
    .col-2.post__col col-2
  .row.justify-content-center.no-children-v-gutters(style='background-color: #d4d4d4; margin-bottom: 10px')
    .col-2.post__col col-2
    .col-2.post__col col-2
  .row.justify-content-end.no-children-v-gutters(style='background-color: #d4d4d4; margin-bottom: 10px')
    .col-2.post__col col-2
    .col-2.post__col col-2
  .row.justify-content-space-between.no-children-v-gutters(style='background-color: #d4d4d4; margin-bottom: 10px')
    .col-2.post__col col-2
    .col-2.post__col col-2
    .col-2.post__col col-2
  .row.justify-content-space-around.no-children-v-gutters(style='background-color: #d4d4d4; margin-bottom: 10px')
    .col-2.post__col col-2
    .col-2.post__col col-2
    .col-2.post__col col-2

p.post__text
  | В заключение этого раздела хотелось бы добавить ещё кое-что. Помните в начале я говорил о том, что пользователь сам волен
  | выбрать, как ему строить сетку – добавлять готовые классы в разметку или же подключать готовые миксины в sass-файлах.
  | Так вот, если пользователь решит использовать готовые миксины, то ему совсем необязательно генерировать большое
  | количество предопределённых классов. И для того, чтобы не генерировать эти классы, мы обернём уже написанный код из
  | файла <span class='code'>partials/alignment.scss</span> в условный блок так, как показано ниже:
+snippet(sass[52], 'scss')

p.post__text
  | И переопределим нашу глобальную переменную <span class='code'>$partials</span> так, чтобы она больше не содержала элемент
  | <span class='code'>alignment</span>.Таким образом у нас не выполнится условие:
+snippet(sass[53], 'scss')

p.post__text
  | Напомню, что функция <span class='code'>index</span> вернёт позицию в списке для <span class='code'>alignment</span> или
  | вернёт <span class='code'>null</span>, если элемент в списке не был найден. То есть найденная позиция интерпретируется как
  | истинное значение условия, а <span class='code'>null</span> – как ложное.

p.post__text
  | Забегая вперёд скажу, что подобным образом мы реализуем остальные части нашей библиотеки, которые будут отвечать за
  | генерацию предопределённых готовых классов. Для исключения тех или иных наборов классов мы можем переопределить переменную
  | <span class='code'>$partials</span>, хранящую список частей библиотеки, отвечающих за генерацию готовых классов. Мы
  | можем вовсе отменить генерацию всех готовых классов, присвоив переменной <span class='code'>$partials</span> значение
  | <span class='code'>false</span>, что значительно сократит скомпилированный css-файл нашей библиотеки.

p.post__text
  | В следующей части мы реализуем модуль, отвечающий за направление расположения колонок сетки.
  | Читайте <a href='/2020/06/22/grid-tutorial-direction/' class='post__link'>продолжение</a>.