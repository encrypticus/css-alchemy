include ../_utils/replacement
//- <span class='code'></span>
    –

-
  const snippets = {
  grid: {

  html: [
  `<div class="container">
    <div class="row">
      <div class="col-12 col-sm-6 col-md-3 col-xs-2"></div>
      <div class="col col-sm-4 col-md-3 col-xs-1"></div>
    </div>
  </div>`,

  `<section class="main">
    <div class="card">
      <div class="card__header"></div>
      <div class="card__body"></div>
      <div class="card__footer"></div>
    </div>
  </section>`,

  `<div class="container"></div>`,

  `<div class="container">
    <div class="row">
      <div class="col">1</div>
      <div class="col">2</div>
      <div class="col">3</div>
      <div class="col">4</div>
    </div>

    <div class="row">
      <div class="col">5</div>
      <div class="col">6</div>
      <div class="col">7</div>
      <div class="col">8</div>
    </div>

    <div class="row">
      <div class="col">9</div>
      <div class="col">10</div>
      <div class="col">11</div>
      <div class="col">12</div>
    </div>
  </div>`,

  `<div class="wrap">
    <div class="header">
      <div class="logo">logo</div>
      <div class="nav">nav</div>
      <div class="login">login</div>
    </div>

    <div class="main">
      <div class="sidebar">sidebar</div>
      <div class="content">content</div>
      <div class="sidebar">sidebar</div>
    </div>

    <div class="footer">
      <div class="logo">logo</div>
      <div class="about">about</div>
      <div class="email">email</div>
    </div>
  </div>`,

  `<div class="container">
    <div class="row">
      <div class="col-2 col-laptop-3 col-laptop-md-4 col-tablet-landscape-6 col-phone-landscape-12">1</div>
      <div class="col-2 col-laptop-3 col-laptop-md-4 col-tablet-landscape-6 col-phone-landscape-12">2</div>
      <div class="col-2 col-laptop-3 col-laptop-md-4 col-tablet-landscape-6 col-phone-landscape-12">3</div>
      <div class="col-2 col-laptop-3 col-laptop-md-4 col-tablet-landscape-6 col-phone-landscape-12">4</div>
      <div class="col-2 col-laptop-3 col-laptop-md-4 col-tablet-landscape-6 col-phone-landscape-12">5</div>
      <div class="col-2 col-laptop-3 col-laptop-md-4 col-tablet-landscape-6 col-phone-landscape-12">6</div>
    </div>
  </div>`,

  `<div class="container">
    <div class="row">
      <div class="col-6">col 6</div>
      <div class="col-6">col 6</div>
    </div>

    <div class="row">
      <div class="col-2">col 2</div>
      <div class="col-3">col 3</div>
      <div class="col-4">col 4</div>
      <div class="col-3">col 3</div>
    </div>
  </div> `,

  `<div class="wrap">
    <div class="inner">
      <div class="column">1</div>
      <div class="column">2</div>
      <div class="column">3</div>
      <div class="column">4</div>
      <div class="column">5</div>
      <div class="column">6</div>
    </div>
  </div>`,

  `<div class="container">
    <div class="example row justify-content-start">
      <div class="example__col col-2">col-2</div>
      <div class="example__col col-2">col-2</div>
    </div>

    <div class="example row justify-content-center">
      <div class="example__col col-2">col-2</div>
      <div class="example__col col-2">col-2</div>
    </div>

    <div class="example row justify-content-end">
      <div class="example__col col-2">col-2</div>
      <div class="example__col col-2">col-2</div>
    </div>

    <div class="example row justify-content-space-between">
      <div class="example__col col-2">col-2</div>
      <div class="example__col col-2">col-2</div>
      <div class="example__col col-2">col-2</div>
    </div>

    <div class="examplerow justify-content-space-around">
      <div class="example__col col-2">col-2</div>
      <div class="example__col col-2">col-2</div>
      <div class="example__col col-2">col-2</div>
    </div>
  </div>`
  ],

  sass: [
  `.main {
    max-width: 1140px;
    margin: 0 auto;
    padding: 0 15px;
  }

  .card {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -15px;
  }

  .card__header,
  .card__body,
  .card__footer {
    flex: 1 0 0%;
    box-sizing: border-box;
    margin: 0 15px 30px;
  }`,

  `$container-width: 1140px !default; // ширина контейнера
  $container-padding: 15px !default; // внутренние отступы контейнера
  $h-gutter: 30px !default; // расстояние между ячейками сетки по горизонтали
  $v-gutter: $h-gutter !default; // расстояние между ячейками сетки по вертикали
  $columns: 12 !default; // количество колонок сетки
  // флаг, указывающий, какой подход будет использован при формиравнии
  // медиазапросов - mobile first или desktop first
  $mobile-first: false !default;

  // возвращает ключевое слово min или max, которое будет использовано
  // при формировании всех медиазапросов библиотеки - min-width или max-width
  @function query-direction() {
    @if($mobile-first) {
      @return min;
    } @else {
      @return max;
    }
  }

  $media-query: query-direction(); // min или max

  $grid-breakpoints: (
    desktop: 1280px,
    laptop: 1024px,
    laptop-md: 960px,
    tablet-landscape: 768px,
    phone-landscape: 640px,
    phone: 480px,
    phone-md: 360px,
    phone-sm: 320px
  ) !default;

  // для уменьшения конечного css-файла можно переопределить переменную,
  // оставив лишь нужные части, или установить значение в false, что
  // предотвратит генерацию большого количества готовых библиотечных
  // классов - это значительно уменьшит размер скомпилированного css-файла
  $partials: (
    alignment,
    direction,
    hide,
    offset,
    ordering,
    show,
    gutters
  ) !default;

  @import 'mixins/mixins';
  @import 'partials/alignment';
  @import 'partials/ordering';
  @import 'partials/direction';
  @import 'partials/hide';
  @import 'partials/show';
  @import 'partials/offset';
  @import 'partials/gutters.scss';
  @import 'base';`,

  `@import "grid.scss";`,

  `$container-width: 1600px;
  $container-padding: 20px;

  @import "grid.scss";`,

  `@media (min-width: 960px) {
    //selectors
  }`,

  `@media (max-width: 960px) {
    //selectors
  }`,

  `$grid-breakpoints: (
    lg: 1140px,
    md: 960px,
    sm: 768px,
    xs: 500px
  );`,

  `@mixin container {
    max-width: $container-width;
    margin: 0 auto;
    padding: 0 $container-padding;
  }`,

  `.wrapper {
    @include container();
  }`,

  `.container {
    @include container;
  }`,

  `@mixin row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -#{$h-gutter / 2};
  }`,

  `.row {
    @include row;
  }`,

  `mixin col {
    flex: 1 0 0%;
    box-sizing: border-box;
    margin: 0 $h-gutter / 2 $v-gutter;
  }`,

  `.col {
    @include col;
  }`,

  `.container {
    @include container;
  }

  .row {
    @include row;
  }

  .col {
    @include col;
  }`,

  `mixin container {
    max-width: $container-width;
    margin: 0 auto;
    padding: 0 $container-padding;
  }

  mixin row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -#{$h-gutter / 2};
  }

  mixin col {
    flex: 1 0 0%;
    box-sizing: border-box;
    margin: 0 $h-gutter / 2 $v-gutter;
  }`,

  `.wrap {
    @include container;
  }

  .header,
  .main,
  .footer {
    @include row;
  }

  .logo,
  .nav,
  .login,
  .sidebar,
  .content,
  .about,
  .email {
    @include col;
  }`,

  `@mixin col($cols: 'false') {
    @if ($cols != 'false' and type_of($cols) == number) {
      @if ($cols > $columns) $cols: $columns;

      width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
      flex: 0 0 auto;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    } @else {
      flex: 1 0 0%;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    }
  }`,

  `.wrap {
    @include container;
  }

  .header,
  .main,
  .footer {
    @include row;
  }

  .logo,
  .sidebar,
  .login,
  .email {
    @include col(3);
  }

  .nav,
  .content,
  .about {
    @include col(6);
  }`,

  `.wrap {
    @include container;
  }

  .header,
  .main,
  .footer {
    @include row;
  }

  .logo,
  .sidebar,
  .login,
  .email {
    @include col(2);
  }

  .nav,
  .content,
  .about {
    @include col(8);
  }`,

  `@for $i from 1 through $columns {
    .col-#{$i} {
      flex: 0 0 auto;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    }
  }`,

  `@mixin generate-grid($cols: $columns) {
    @for $i from 1 through $cols {
      .col-#{$i} {
        width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
      }
    }
  }`,

  `@function col-width($cols: 1) {
    @return calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
  }`,

  `@mixin generate-grid($cols: $columns) {
    @for $i from 1 through $cols {
      .col-#{$i} {
        width: col-width($i);
      }
    }
  }`,

  `@include generate-grid();`,

  `.container {
    @include container;
  }

  .row {
    @include row;
  }

  .col {
    @include col;
  }

  /*
    Генерация "колоночных" классов и правил для них исходя из глобальной переменной $columns - заданного количества
    столбцов сетки
  */
  @for $i from 1 through $columns {
    .col-#{$i} {
      flex: 0 0 auto;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    }
  }

  // генерация "колоночных" классов
  @include generate-grid();`,

  `// превращает элемент в контейнер сетки
  @mixin container {
    max-width: $container-width;
    margin: 0 auto;
    padding: 0 $container-padding;
  }

  // превращает элемент в строку сетки
  @mixin row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -#{$h-gutter / 2};
  }

  // превращает элемент в колонку сетки
  @mixin col($cols: 'false') {
    @if ($cols != 'false' and type_of($cols) == number) {
      @if ($cols > $columns) $cols: $columns;

      width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
      flex: 0 0 auto;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    } @else {
      flex: 1 0 0%;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    }
  }

  // рассчитывает ширину столбца в зависимости от переданного количества столбцов $cols
  @function col-width($cols: 1) {
    @return calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
  }

  /*
    Генерирует "колоночные" классы вида .col-1, .col-2, .col-3 и т.д. исходя из глабальной переменной $columns - заданного
    количества колонок сетки
  */
  @mixin generate-grid($cols: $columns) {
    @for $i from 1 through $cols {
      .col-#{$i} {
        width: col-width($i);
      }
    }
  }`,

  `@mixin col($cols: 'false', $breakpoint: 'false') {

    @if ($breakpoint != 'false' and map_has_key($grid-breakpoints, $breakpoint) and $cols != 'false' and type_of($cols) == number) {

      @media screen and(#{$media-query}-width: map-get($grid-breakpoints, $breakpoint)) {
        width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
        flex: 0 0 auto;
        box-sizing: border-box;
        margin: 0 $h-gutter / 2 $v-gutter;
      }

    } @else if ($breakpoint == 'false' and $cols != 'false' and type_of($cols) == number) {
      width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
      flex: 0 0 auto;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    } @else {
      flex: 1 0 0%;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    }
  }`,

  `@include col(8, laptop);`,

  `@media screen and (max-width: 1024px) {
    width: calc(100% / 12 * 8 - 30px);
    flex: 0 0 auto;
    box-sizing: border-box;
    margin: 0 15px 15px;
  }`,

  `.wrap {
    @include container;
  }

  .inner {
    @include row;
  }

  .column {
    @include col(2);
    @include col(3, laptop);
    @include col(4, laptop-md);
    @include col(6, tablet-landscape);
    @include col(12, phone-landscape);
  }`,

  `flex: 1 0 0%;
  box-sizing: border-box;
  margin: 0 $h-gutter / 2 $v-gutter;`,

  `width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
  flex: 0 0 auto;
  box-sizing: border-box;
  margin: 0 $h-gutter / 2 $v-gutter;`,

  `@media screen and(#{$media-query}-width: map-get($grid-breakpoints, $breakpoint)) {
    width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
    flex: 0 0 auto;
    box-sizing: border-box;
    margin: 0 $h-gutter / 2 $v-gutter;
  }`,

  `@mixin generate-breakpoint($cols, $screen-width, $name) {
    .col-#{$name}-#{$cols} {
      @media screen and (#{$media-query}-width: $screen-width) {
        width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter}) !important;
        flex: auto 0 0;
      }
    }
  }

  @mixin generate-grid-breakpoints($cols: $columns, $breakpoints: $grid-breakpoints) {
    @for $i from 1 through $cols {
      @each $name, $value in $breakpoints {
        @include generate-breakpoint($i, $value, $name);
      }
    }
  }`,

  `// превращает элемент в контейнер сетки
  @mixin container {
    max-width: $container-width;
    margin: 0 auto;
    padding: 0 $container-padding;
  }

  // превращает элемент в строку сетки
  @mixin row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -#{$h-gutter / 2};
  }

  /*
    Превращает элемент в ячейку сетки размером в $cols колонок.
    Если при вызове примеси не передан ни один аргумент, к элементу будут применены правила, согласно которым элемент
    будет компоноваться как флекс-элемент и будет занимать пространство, равное занимаемому пространству соседними
    флекс-элментами
    Если при вызове примеси переданы оба аргумента и при этом тип первого аргумента $cols - число, а значение второго
    аргумента соответвствует одному из имен свойств глобального объекта $grid-breakpoints, то правило применяется только
    в медиазапросе, значение которого берется из этого второго аргумента. При этом в качестве значения второго аргумента
    должно использоваться одно из имен ключей глобального объекта $grid-breakpoints
    Если же передан только первый аргумент или значение второго аргумента не соответствует
    ни одному из имен ключей глобального объекта $grid-breakpoints, то элемент будет просто занимать количество ячеек,
    равное $cols
  */
  @mixin col($cols: 'false', $breakpoint: 'false') {

    @if ($breakpoint != 'false' and map_has_key($grid-breakpoints, $breakpoint) and $cols != 'false' and type_of($cols) == number) {

      @media screen and(#{$media-query}-width: map-get($grid-breakpoints, $breakpoint)) {
        width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
        flex: 0 0 auto;
        box-sizing: border-box;
        margin: 0 $h-gutter / 2 $v-gutter;
      }

    } @else if ($breakpoint == 'false' and $cols != 'false' and type_of($cols) == number) {
      width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
      flex: 0 0 auto;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    } @else {
      flex: 1 0 0%;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    }
  }

  // рассчитывает ширину столбца в зависимости от переданного количества столбцов $cols
  @function col-width($cols: 1) {
    @return calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
  }

  /*
    Генерирует "колоночные" классы вида .col-1, .col-2, .col-3 и т.д. исходя из глабальной переменной $columns - заданного
    количества колонок сетки
  */
  @mixin generate-grid($cols: $columns) {
    @for $i from 1 through $cols {
      .col-#{$i} {
        width: col-width($i);
      }
    }
  }

  /*
    Генерирует "колоночный" класс сетки вида .col-tablet-8 и css-правила для него в медиазапросе исходя из $cols - числа
    столбцов, $screen-width - ширины экрана и $name - названия брейкпойнта, значение которого должно соответсвовать одному
    из имен ключей глобального объекта $grid-breakpoints
  */
  @mixin generate-breakpoint($cols, $screen-width, $name) {
    .col-#{$name}-#{$cols} {
      @media screen and (#{$media-query}-width: $screen-width) {
        width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter}) !important;
        flex: auto 0 0;
      }
    }
  }

  /*
    Генерирует "колоночные" классы сетки и css-правила для них в медиазапросе исходя из глобальной переменной
    $columns - заданного количества колонок сетки и глобальной переменной $grid-breakpoints - объекта с брейкпойнтами
  */
  @mixin generate-grid-breakpoints($cols: $columns, $breakpoints: $grid-breakpoints) {
    @for $i from 1 through $cols {
      @each $name, $value in $breakpoints {
        @include generate-breakpoint($i, $value, $name);
      }
    }
  }`,

  `.container {
    @include container;
  }

  .row {
    @include row;
  }

  .col {
    @include col;
  }

  /*
    Генерация "колоночных" классов и правил для них исходя из глобальной переменной $columns - заданного количества
    столбцов сетки
  */
  @for $i from 1 through $columns {
    .col-#{$i} {
      flex: 0 0 auto;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    }
  }

  // генерация "колоночных" классов
  @include generate-grid();

  // генерация "колоночных" клоссов с медиазапросами
  @include generate-grid-breakpoints();`,

  `@mixin justify-content($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        justify-content: $align;
      }
    } @else {
      justify-content: $align;
    }
  }`,

  `.some {
    @include justify-content(flex-end);
  }`,

  `.some {
    @include justify-content(flex-end, laptop);
  }`,

  `@mixin align-items($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        align-items: $align;
      }
    } @else {
      align-items: $align;
    }
  }`,

  `@mixin align-self($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        align-self: $align;
      }
    } @else {
      align-self: $align;
    }
  }`,

  `@mixin justify-content($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        justify-content: $align;
      }
    } @else {
      justify-content: $align;
    }
  }

  @mixin align-items($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        align-items: $align;
      }
    } @else {
      align-items: $align;
    }
  }

  @mixin align-self($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        align-self: $align;
      }
    } @else {
      align-self: $align;
    }
  }`,

  `.justify-content-start {
    @include justify-content(flex-start);
  }

  .justify-content-center {
    @include justify-content(center);
  }

  .justify-content-end {
    @include justify-content(flex-end);
  }

  .justify-content-space-between {
    @include justify-content(space-between);
  }

  .justify-content-space-around {
    @include justify-content(space-around);
  }

  .align-items-start {
    @include align-items(flex-start);
  }

  .align-items-center {
    @include align-items(center);
  }

  .align-items-end {
    @include align-items(flex-end);
  }

  .align-items-stretch {
    @include align-items(stretch);
  }

  .align-items-baseline {
    @include align-items(baseline);
  }

  .align-self-start {
    @include align-self(flex-start);
  }

  .align-self-center {
    @include align-self(center);
  }

  .align-self-end {
    @include align-self(flex-end);
  }

  .align-self-stretch {
    @include align-self(stretch);
  }

  .align-self-baseline {
    @include align-self(baseline);
  }`,

  `@mixin generate-h-alignment-breakpoints() {
    @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
      @each $className, $value in $h-alignment-classes {
        .justify-content-#{$breakpoint-name}-#{$className} {
          @include justify-content($value, $breakpoint-name);
        }
      }
    }
  }`,

  `$h-alignment-classes: (
    start: flex-start,
    center: center,
    end: flex-end,
    between: space-between,
    around: space-around,
  );`,

  `@mixin generate-v-alignment-breakpoints() {
    @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
      @each $className, $value in $v-alignment-classes {
        .align-items-#{$breakpoint-name}-#{$className} {
          @include align-items($value, $breakpoint-name);
        }
      }
    }
  }

  @mixin generate-self-alignment-breakpoints() {
    @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
      @each $className, $value in $v-alignment-classes {
        .align-self-#{$breakpoint-name}-#{$className} {
          @include align-self($value, $breakpoint-name);
        }
      }
    }
  }`,

  `$v-alignment-classes: (
    start: flex-start,
    center: center,
    end: flex-end,
    stretch: stretch,
    baseline: baseline
  );`,

  `// генерация "выравнивающих" классов вдоль главной оси внутри медиазапросов
  @include generate-h-alignment-breakpoints();
  // // генерация "выравнивающих" классов вдоль поперечной оси внутри медиазапросов
  @include generate-v-alignment-breakpoints();
  // // генерация "выравнивающих" классов вдоль главной оси внутри медиазапросов для отдельно взятой колонки
  @include generate-self-alignment-breakpoints();`,

  `/* Выравнивание колонок внутри ряда вдоль основной и поперечной осей */

  $h-alignment-classes: (
    start: flex-start,
    center: center,
    end: flex-end,
    between: space-between,
    around: space-around,
  );

  $v-alignment-classes: (
    start: flex-start,
    center: center,
    end: flex-end,
    stretch: stretch,
    baseline: baseline
  );

  /* ГОРИЗОНТАЛЬНОЕ ВЫРАВНИВАНИЕ */

  /*
    Выкладывает колонки сетки в ряду согласно параметру $align, который должен принимать одно из следующих значений:
    flex-start, flex-end, center, space-between, space-around.
    Применяется к элементам ряда ($row) сетки.
    Если передан аргумент $breakpoint, выравнивание сработает в медиазапросе согласно значению этого аргумента.
    Значением аргумента должно быть одно из имен ключей глобального массива $grid-breakpoints.
  */
  @mixin justify-content($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        justify-content: $align;
      }
    } @else {
      justify-content: $align;
    }
  }

  /* ВЕРТИКАЛЬНОЕ ВЫРАВНИВАНИЕ */

  /*
    Выкладывает колонки сетки в ряду согласно параметру $align, который должен принимать одно из следующих значений:
    flex-start, flex-end, center, stretch, baseline.
    Применяется к элементам ряда ($row) сетки.
    Если передан аргумент $breakpoint, выравнивание сработает в медиазапросе согласно значению этого аргумента.
    Значением аргумента должно быть одно из имен ключей глобального массива $grid-breakpoints.
  */
  @mixin align-items($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        align-items: $align;
      }
    } @else {
      align-items: $align;
    }
  }

  /*
    Выкладывает отдельно взятую колонку сетки в ряду согласно параметру $align, который должен принимать одно из следующих значений:
    flex-start, flex-end, center, stretch, baseline.
    Применяется к элементу отдельно взятой колонки ($col).
    Если передан аргумент $breakpoint, выравнивание сработает в медиазапросе согласно значению этого аргумента.
    Значением аргумента должно быть одно из имен ключей глобального массива $grid-breakpoints.
  */
  @mixin align-self($align: flex-start, $breakpoint: null) {
    @if (map_has_key($grid-breakpoints, $breakpoint)) {
      @media screen and(#{$media-query}-width: map_get($grid-breakpoints, $breakpoint)) {
        align-self: $align;
      }
    } @else {
      align-self: $align;
    }
  }

  /*
    Генерирует классы выравнивания колонок сетки вдоль главной оси. Внутри класоов правила генерируются внутри директивы
    @media, то есть внутри медиазапроса. Например: .justify-content-desktop-start, .justify-content-laptop-center и т.д.
    Применяется к элементам строки ($row). Для формирования классов и брейкпоинтов в медиазапросах использует массивы
    $h-alignment-classes и $grid-breakpoints.
  */
  @mixin generate-h-alignment-breakpoints() {
    @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
      @each $className, $value in $h-alignment-classes {
        .justify-content-#{$breakpoint-name}-#{$className} {
          @include justify-content($value, $breakpoint-name);
        }
      }
    }
  }

  /*
    Генерирует классы выравнивания колонок сетки вдоль поперечной оси. Внутри класоов правила генерируются внутри директивы
    @media, то есть внутри медиазапроса. Например: .align-items-desktop-start, .align-items-laptop-center и т.д.
    Применяется к элементам строки ($row).
    Для формирования классов и брейкпойнтов в медиазапросах использует массивы $v-alignment-classes и $grid-breakpoints.
  */
  @mixin generate-v-alignment-breakpoints() {
    @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
      @each $className, $value in $v-alignment-classes {
        .align-items-#{$breakpoint-name}-#{$className} {
          @include align-items($value, $breakpoint-name);
        }
      }
    }
  }

  /*
    Генерирует классы выравнивания отдельно взятой колонки сетки вдоль поперечной оси.
    Внутри класоов правила генерируются внутри директивы @media, то есть внутри медиазапроса.
    Например: .align-self-desktop-start, .align-self-laptop-center и т.д. Применяется к элементам колонки ($col).
    Для формирования классов и брейкпойнтов в медиазапросах использует массивы $v-alignment-classes и $grid-breakpoints.
  */
  @mixin generate-self-alignment-breakpoints() {
    @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
      @each $className, $value in $v-alignment-classes {
        .align-self-#{$breakpoint-name}-#{$className} {
          @include align-self($value, $breakpoint-name);
        }
      }
    }
  }`,

  `.justify-content-start {
    @include justify-content(flex-start);
  }

  .justify-content-center {
    @include justify-content(center);
  }

  .justify-content-end {
    @include justify-content(flex-end);
  }

  .justify-content-space-between {
    @include justify-content(space-between);
  }

  .justify-content-space-around {
    @include justify-content(space-around);
  }

  .align-items-start {
    @include align-items(flex-start);
  }

  .align-items-center {
    @include align-items(center);
  }

  .align-items-end {
    @include align-items(flex-end);
  }

  .align-items-stretch {
    @include align-items(stretch);
  }

  .align-items-baseline {
    @include align-items(baseline);
  }

  .align-self-start {
    @include align-self(flex-start);
  }

  .align-self-center {
    @include align-self(center);
  }

  .align-self-end {
    @include align-self(flex-end);
  }

  .align-self-stretch {
    @include align-self(stretch);
  }

  .align-self-baseline {
    @include align-self(baseline);
  }

  // генерация "выравнивающих" классов вдоль главной оси внутри медиазапросов
  @include generate-h-alignment-breakpoints();
  // генерация "выравнивающих" классов вдоль поперечной оси внутри медиазапросов
  @include generate-v-alignment-breakpoints();
  // генерация "выравнивающих" классов вдоль главной оси внутри медиазапросов для отдельно взятой колонки
  @include generate-self-alignment-breakpoints();`,

  `.container {
    @include container();

    .example {
      @include row();

      &:first-child {
        @include justify-content(flex-start);
      }

      &:nth-child(2) {
        @include justify-content(center);
      }

      &:nth-child(3) {
        @include justify-content(flex-end);
      }

      &:nth-child(4) {
        @include justify-content(space-between);
      }

      &:nth-child(5) {
        @include justify-content(space-around);
      }

      &__col {
        @include col(2);
      }
    }
  }`,

  `@if index($partials, alignment) {

    .justify-content-start {
      @include justify-content(flex-start);
    }

    .justify-content-center {
      @include justify-content(center);
    }

    .justify-content-end {
      @include justify-content(flex-end);
    }

    .justify-content-space-between {
      @include justify-content(space-between);
    }

    .justify-content-space-around {
      @include justify-content(space-around);
    }

    .align-items-start {
      @include align-items(flex-start);
    }

    .align-items-center {
      @include align-items(center);
    }

    .align-items-end {
      @include align-items(flex-end);
    }

    .align-items-stretch {
      @include align-items(stretch);
    }

    .align-items-baseline {
      @include align-items(baseline);
    }

    .align-self-start {
      @include align-self(flex-start);
    }

    .align-self-center {
      @include align-self(center);
    }

    .align-self-end {
      @include align-self(flex-end);
    }

    .align-self-stretch {
      @include align-self(stretch);
    }

    .align-self-baseline {
      @include align-self(baseline);
    }

    // генерирация классов горизонтального выравнивания ячеек сетки в строке в медиазапросах
    @include generate-h-alignment-breakpoints();
    // генерация классов вертикального выравнивания ячеек сетки в столбце в медиазапросах
    @include generate-v-alignment-breakpoints();
    // генерация классов вертикального выравнивания отдельно взятой ячейки сетки в столбце в медиазапросах
    @include generate-self-alignment-breakpoints();
  }`,

  `@if index($partials, alignment) {
    // ...code
  }`
  ],

  bash: [
  `grid/         - корневая директория библиотеки
    dist/       - скомпилированные css-файлы библиотеки
    sass/       - реализиция бибиотеки в sass-синтаксисе
    scss/       - реализация библиотеки в scss-синтаксисе
      mixins/   - миксины библиотеки, реализующие ядро
      partials/ - части библиотеки, реализующие генерацию предопределённых сеточных классов
      base.scss - начальная инициализация сетки
      grid.scss - главный файл, точка входа в библиотеку`
  ]
  }
  }

mixin snippet(snippet = '', type = 'html')
  pre&attributes(attributes)
    code(class= type)
      != replacement(snippet)