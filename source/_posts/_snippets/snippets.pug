include ../_utils/replacement

-
  const snippets = {
  grid: {

  html: [
  `<div class="container">
    <div class="row">
      <div class="col-12 col-sm-6 col-md-3 col-xs-2"></div>
      <div class="col col-sm-4 col-md-3 col-xs-1"></div>
    </div>
  </div>`,

  `<section class="main">
    <div class="card">
      <div class="card__header"></div>
      <div class="card__body"></div>
      <div class="card__footer"></div>
    </div>
  </section>`,

  `<div class="container"></div>`,

  `<div class="container">
    <div class="row">
      <div class="col">1</div>
      <div class="col">2</div>
      <div class="col">3</div>
      <div class="col">4</div>
    </div>

    <div class="row">
      <div class="col">5</div>
      <div class="col">6</div>
      <div class="col">7</div>
      <div class="col">8</div>
    </div>

    <div class="row">
      <div class="col">9</div>
      <div class="col">10</div>
      <div class="col">11</div>
      <div class="col">12</div>
    </div>
  </div>`,

  `<div class="wrap">
    <div class="header">
      <div class="logo">logo</div>
      <div class="nav">nav</div>
      <div class="login">login</div>
    </div>

    <div class="main">
      <div class="sidebar">sidebar</div>
      <div class="content">content</div>
      <div class="sidebar">sidebar</div>
    </div>

    <div class="footer">
      <div class="logo">logo</div>
      <div class="about">about</div>
      <div class="email">email</div>
    </div>
  </div>`
  ],

  sass: [
  `.main {
    max-width: 1140px;
    margin: 0 auto;
    padding: 0 15px;
  }

  .card {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -15px;
  }

  .card__header,
  .card__body,
  .card__footer {
    flex: 1 0 0%;
    box-sizing: border-box;
    margin: 0 15px 30px;
  }`,

  `$container-width: 1140px !default; // ширина контейнера
  $container-padding: 15px !default; // внутренние отступы контейнера
  $h-gutter: 30px !default; // расстояние между ячейками сетки по горизонтали
  $v-gutter: $h-gutter !default; // расстояние между ячейками сетки по вертикали
  $columns: 12 !default; // количество колонок сетки
  // флаг, указывающий, какой подход будет использован при формиравнии
  // медиазапросов - mobile first или desktop first
  $mobile-first: false !default;

  // возвращает ключевое слово min или max, которое будет использовано
  // при формировании всех медиазапросов библиотеки - min-width или max-width
  @function query-direction() {
    @if($mobile-first) {
      @return min;
    } @else {
      @return max;
    }
  }

  $media-query: query-direction(); // min или max

  $grid-breakpoints: (
    desktop: 1280px,
    laptop: 1024px,
    laptop-md: 960px,
    tablet-landscape: 768px,
    phone-landscape: 640px,
    phone: 480px,
    phone-md: 360px,
    phone-sm: 320px
  ) !default;

  // для уменьшения конечного css-файла можно переопределить переменную,
  // оставив лишь нужные части, или установить значение в false, что
  // предотвратит генерацию большого количества готовых библиотечных
  // классов - это значительно уменьшит размер скомпилированного css-файла
  $partials: (
    alignment,
    direction,
    hide,
    offset,
    ordering,
    show,
    gutters
  ) !default;

  @import 'mixins/mixins';
  @import 'partials/alignment';
  @import 'partials/ordering';
  @import 'partials/direction';
  @import 'partials/hide';
  @import 'partials/show';
  @import 'partials/offset';
  @import 'partials/gutters.scss';
  @import 'base';`,

  `@import "grid.scss";`,

  `$container-width: 1600px;
  $container-padding: 20px;

  @import "grid.scss";`,

  `@media (min-width: 960px) {
    //selectors
  }`,

  `@media (max-width: 960px) {
    //selectors
  }`,

  `$grid-breakpoints: (
    lg: 1140px,
    md: 960px,
    sm: 768px,
    xs: 500px
  );`,

  `@mixin container {
    max-width: $container-width;
    margin: 0 auto;
    padding: 0 $container-padding;
  }`,

  `.wrapper {
    @include container();
  }`,

  `.container {
    @include container;
  }`,

  `@mixin row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -#{$h-gutter / 2};
  }`,

  `.row {
    @include row;
  }`,

  `mixin col {
    flex: 1 0 0%;
    box-sizing: border-box;
    margin: 0 $h-gutter / 2 $v-gutter;
  }`,

  `.col {
    @include col;
  }`,

  `.container {
    @include container;
  }

  .row {
    @include row;
  }

  .col {
    @include col;
  }`,

  `mixin container {
    max-width: $container-width;
    margin: 0 auto;
    padding: 0 $container-padding;
  }

  mixin row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -#{$h-gutter / 2};
  }

  mixin col {
    flex: 1 0 0%;
    box-sizing: border-box;
    margin: 0 $h-gutter / 2 $v-gutter;
  }`,

  `.wrap {
    @include container;
  }

  .header,
  .main,
  .footer {
    @include row;
  }

  .logo,
  .nav,
  .login,
  .sidebar,
  .content,
  .about,
  .email {
    @include col;
  }`,

  `@mixin col($cols: 'false') {
    @if ($cols != 'false' and type_of($cols) == number) {
      @if ($cols > $columns) $cols: $columns;

      width: calc(100% / #{$columns} * #{$cols} - #{$h-gutter});
      flex: 0 0 auto;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    } @else {
      flex: 1 0 0%;
      box-sizing: border-box;
      margin: 0 $h-gutter / 2 $v-gutter;
    }
  }`
  ],

  bash: [
  `grid/         - корневая директория библиотеки
    dist/       - скомпилированные css-файлы библиотеки
    sass/       - реализиция бибиотеки в sass-синтаксисе
    scss/       - реализация библиотеки в scss-синтаксисе
      mixins/   - миксины библиотеки, реализующие ядро
      partials/ - части библиотеки, реализующие генерацию предопределённых сеточных классов
      base.scss - начальная инициализация сетки
      grid.scss - главный файл, точка входа в библиотеку`
  ]
  }
  }

mixin snippet(snippet = '', type = 'html')
  pre&attributes(attributes)
    code(class= type)
      != replacement(snippet)