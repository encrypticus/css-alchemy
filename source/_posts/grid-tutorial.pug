---
title: 'Исчерпывающее руководство по созданию модульной библиотеки, реализующей адаптивную сетку'
date: 2020-06-20 21:26:55
tags:
- scss
- sass
- libs
categories:
- препроцессоры
- scss
- библиотеки
thumbnail: /css-alchemy/img/flexbox-grid-hero2.jpg
include_post_style: post
include_highlight: true
---
include ../../themes/alchemy/layout/components/heading/heading
include _snippets/snippets

p.post__text
  | Эта статья – пошаговое исчерпывающее руководство по созданию собственной "сеточной" системы с использованием препроцессора
  | Sass. Подробно, шаг за шагом я покажу, как создать модульную, гибкую и легко кастомизируемую библиотеку, реализующую
  | адаптивную сетку, наподобие той, что используется в фреймворках Bootstrap, Foundation, Bulma и многих других.
  | Библиотека позволит быстро и без особых усилий создавать адаптивные, отзывчивые макеты. Все примеры кода будут показаны
  | с применением scss-синтаксиса. Итак, приступим!

+heading('Два подхода при построении сетки')
p.post__text При построении сетки используются два основополагающих подхода:
ul.post__list
  li
    span.post__list-item-span
    | Первый подход – в разметке страницы необходимым html-элементам прописываются нужные сеточные классы.
    | Все детали реализации скрыты в CSS:
    +snippet(snippets.grid.html[0])
  li
    span.post__list-item-span
    | Второй подход – все необходимые для реализации компонентов сетки правила
    | прописываются в нужных селекторах в стилевом файле:
    +snippet(snippets.grid.sass[0], 'css')
    +snippet(snippets.grid.html[1])

p.post__text
  | Ни один из подходов не является более или менее правильным по отношению один к другому. У каждого имеются как свои плюсы,
  | так и минусы. Какой из них выбрать – лишь вопрос ваших предпочтений. При первом подходе разметка засоряется большим
  | количеством классов, которые к тому же приходится запоминать. При втором подходе усложняются стили. Мы в своей библиотеке
  | реализуем оба этих подхода – библиотека будет включать как богатый набор предопределенных классов, так и набор готовых
  | sass/scss миксинов и функций, в совокупности реализующих адаптивную сетку.


+heading('Элементы сетки')
p.post__text Каждая сетка должна включать элементы контейнера, рядов и колонок.


+heading('Структура каталогов')
+snippet(snippets.grid.bash[0], 'bash')
p.post__text
  span.code grid/
  |  – это основная директория, в которой будет храниться весь код нашей библиотеки
p.post__text
  span.code dist/
  |  – директория содержит скомпилированные минифицированный и неминифицированный css-файлы библиотеки
p.post__text
  span.code sass/
  |  – в этой директории будет храниться код библиотеки в sass-синтаксисе
p.post__text
  span.code scss/
  |  – в этой директории будет храниться код библиотеки в scss-синтаксисе
p.post__text
  span.code mixins/
  |  – директория с миксинами, реализующими основной функционал библиотеки
p.post__text
  span.code partials/
  |  – директория хранит код, отвечающий за генерацию предопределённых готовых классов библиотеки
p.post__text
  span.code base.scss/base.sass/
  |  – этот файл содержит код, отвечающий за начальную инициализацию библиотеки. В нём задаются
  | основные классы: контейнера, ряда, колонки, а также генерируются "колоночные" классы и классы в медиазапросах
p.post__text
  span.code grid.scss/grid.sass
  |  – это так называемая точка входа в библиотеку. Именно этот файл будет указан в поле <span class='code'>main</span>
  | в файле <span class='code'>package.json</span>. Файл будет содержать все глобальные переменные библиотеки, а также
  | подключать все необходимые части библиотеки