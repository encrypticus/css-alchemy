---
title: 'Заметки по Kotlin'
date: 2023-07-31 22:27:08
tags:
- kotlin
- notes
categories:
- kotlin
- notes
thumbnail: /css-alchemy/img/kotlin-notes.png
include_post_style: post
include_highlight: true
---
include ../../themes/alchemy/layout/components/heading/heading
include _snippets/snippet
include _snippets/kotlin-notes

+heading('Лямбды')
p.post__text
  | Лямбда-функции полезны, потому что они дают больше гибкости при написании программ. Однако за гибкость приходится
  | платить.
  | Когда вы объявляете лямбда-функцию, она представляется вJVM экземпляром объекта независимо от того, на какой платформе
  | выполняется код Kotlin.
  | Кроме того, во время выполнения ваша программа выделяет память для всех переменных, доступных в лямбда-функции, а это
  | увеличивает затраты памяти

p.post__text
  | Проще говоря, лямбда-функции повышают расход памяти, что может отразиться на производительности. А потери
  | производительности следует избегать.
  | К счастью, есть возможность включить оптимизацию, которая избавит от лишних затрат памяти при использовании
  | лямбда-функций в качестве аргументов.
  | Такая возможность называется встраиванием (inlining). Встраивание избавляет от необходимости использовать экземпляр
  | объекта и выделять память для
  | переменных в лямбда-функции. Чтобы встроить лямбда-функцию, отметьте функцию, которой она передается, ключевым
  | словом <span class="code">inline</span>.

p.post__text
  | Встраивание функций — простой способ повышения производительности в приложениях, и мы рекомендуем применять его при
  | любой возможности для функций,
  | получающих лямбда-функции. Все делается так просто, что возникает вопрос: почему функции не встраиваются по умолчанию?
  | В некоторых ситуациях объявление функции с ключевым словом inline невозможно. Есть два случая, когда функцию нельзя
  | объявить как встраиваемую:
  ol(style="list-style-type: decimal;list-style-position: inside;")
    li
      | Функция является рекурсивной (то есть вызывает сама себя). Рекурсивные функции не могут встраиваться, потому что они
      | должны встраиваться сами в
      | себя, что приведет к бесконечному циклу копирования и вставки.
    li
      | Функция использует другие функции или переменные с более ограниченной областью видимости, чем у встраиваемой функции.
      | Тела функций должны полностью вставляться повсюду, где вызывается встраиваемая функция. На вставленный код
      | распространяются те же правила видимости,
      | что и на обычный код. Это означает: если у вас имеется публичная встраиваемая функция, все используемые в ней функции
      | и переменные т оже должны быть
      | публичными. Тем не менее вы можете создать приватную встраиваемую функцию, которая использует приватные функции и
      | переменные.

p.post__text

p.post__text
  | До сих пор вы объявляли лямбда-выражения для передачи
  | функции в виде аргумента другой функции. Сделать это можно иначе: передать ссылку на функцию. Ссылка на функцию
  | преобразует обычную функцию,
  | определенную с ключевым словом fun, в значение с типом функции. Ссылку на функцию можно использовать везде, где
  | допускается лямбда-выражение.
  | Допустим, вы хотите выделить из кода лямбда-выражение, выводящее текст желтым цветом. Для этого реализация
  | лямбдавыражения извлекается в отдельную
  | функцию и применяется синтаксис ссылки на функцию (выделен в примере кода ниже):
  +snippet(snippets[0], 'kotlin')